@page "/documentos"
@using BlazorApp.Models
@using BlazorApp.Services
@inject DocumentoService DocumentoService
@inject IJSRuntime JS 

<h3>Lista de Documentos</h3>

<div class="mb-3 d-flex align-items-end gap-3">
    <div>
        <label for="filtroOrden" class="form-label">Ordenar por:</label>
        <select id="filtroOrden" class="form-select" @onchange="OnOrdenChanged">
            <option value="codigoAsc">Código (Menor a Mayor)</option>
            <option value="codigoDesc">Código (Mayor a Menor)</option>
            <option value="descripcionAsc">Descripción (A - Z)</option>
            <option value="descripcionDesc">Descripción (Z - A)</option>
        </select>
    </div>
    <div>
        <label class="form-label invisible">.</label>
        <button class="btn btn-primary" @onclick="RefrescarDocumentos">
            🔄 Refrescar
        </button>
    </div>
</div>

@if (documentos == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Código</th>
                <th>Descripción</th>
                <th>¿Activa?</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doc in documentos)
            {
                <tr>
                    <td>@doc.Codigo</td>
                    <td>@doc.Descripcion</td>
                    <td>@(doc.VActiva ? "Sí" : "No")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Documento>? documentos;
    private string ordenActual = "codigoAsc";

    protected override async Task OnInitializedAsync()
    {
        await CargarDocumentosAsync();
    }

    private async Task CargarDocumentosAsync()
    {
        documentos = await DocumentoService.ObtenerDocumentosAsync();
        OrdenarDocumentos();
    }

    private async Task RefrescarDocumentos()
    {
        try
        {
            await CargarDocumentosAsync();
            await JS.InvokeVoidAsync("alert", "✅ Datos actualizados correctamente.");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"❌ Error al actualizar los documentos: {ex.Message}");
        }
    }

    private void OnOrdenChanged(ChangeEventArgs e)
    {
        ordenActual = e.Value?.ToString() ?? "codigoAsc";
        OrdenarDocumentos();
    }

    private void OrdenarDocumentos()
    {
        if (documentos == null) return;

        documentos = ordenActual switch
        {
            "codigoAsc" => documentos.OrderBy(d => d.Codigo).ToList(),
            "codigoDesc" => documentos.OrderByDescending(d => d.Codigo).ToList(),
            "descripcionAsc" => documentos.OrderBy(d => d.Descripcion).ToList(),
            "descripcionDesc" => documentos.OrderByDescending(d => d.Descripcion).ToList(),
            _ => documentos
        };
    }
}
