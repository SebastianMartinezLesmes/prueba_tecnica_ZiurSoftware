@page "/documentos"
@using BlazorApp.Models
@using BlazorApp.Services
@inject DocumentoService DocumentoService

<!-- Modal Bootstrap -->
@if (!string.IsNullOrEmpty(mensajeModal))
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Informaci√≥n</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <p>@mensajeModal</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="sticky-header mb-3 border-bottom">
    <h3 class="mb-3">Lista de Documentos</h3>
    <div class="d-flex flex-wrap align-items-end gap-3">
        <div>
            <label for="filtroOrden" class="form-label">Ordenar por:</label>
            <select id="filtroOrden" class="form-select" @onchange="OnOrdenChanged">
                <option value="codigoAsc">C√≥digo (Menor a Mayor)</option>
                <option value="codigoDesc">C√≥digo (Mayor a Menor)</option>
                <option value="descripcionAsc">Descripci√≥n (A - Z)</option>
                <option value="descripcionDesc">Descripci√≥n (Z - A)</option>
            </select>
        </div>
        <div>
            <label for="filtroEstado" class="form-label">Estado:</label>
            <select id="filtroEstado" class="form-select" @onchange="OnEstadoChanged">
                <option value="todos">Todos</option>
                <option value="activos">Activos</option>
                <option value="inactivos">Inactivos</option>
            </select>
        </div>
        <div>
            <label class="form-label invisible">.</label>
            <button class="btn btn-primary" @onclick="RefrescarDocumentos">
                üîÑ Refrescar
            </button>
        </div>
    </div>
</div>

@if (documentosFiltrados == null)
{
    <p><em>Cargando...</em></p>
}
else if (documentosFiltrados.Count == 0)
{
    <p><em>No hay documentos que coincidan con el filtro.</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>C√≥digo</th>
                <th>Descripci√≥n</th>
                <th>¬øActiva?</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doc in documentosFiltrados)
            {
                <tr>
                    <td>@doc.Codigo</td>
                    <td>@doc.Descripcion</td>
                    <td>@(doc.VActiva ? "S√≠" : "No")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Documento>? documentos;
    private List<Documento>? documentosFiltrados;
    private string ordenActual = "codigoAsc";
    private string estadoFiltro = "todos";
    private string? mensajeModal;

    protected override async Task OnInitializedAsync()
    {
        await CargarDocumentosAsync();
    }

    private async Task CargarDocumentosAsync()
    {
        documentos = await DocumentoService.ObtenerDocumentosAsync();
        AplicarFiltrosYOrden();
    }

    private void AplicarFiltrosYOrden()
    {
        if (documentos == null) return;

        IEnumerable<Documento> filtrados = documentos;

        // Filtro por estado
        filtrados = estadoFiltro switch
        {
            "activos" => filtrados.Where(d => d.VActiva),
            "inactivos" => filtrados.Where(d => !d.VActiva),
            _ => filtrados
        };

        // Ordenamiento
        filtrados = ordenActual switch
        {
            "codigoAsc" => filtrados.OrderBy(d => d.Codigo),
            "codigoDesc" => filtrados.OrderByDescending(d => d.Codigo),
            "descripcionAsc" => filtrados.OrderBy(d => d.Descripcion),
            "descripcionDesc" => filtrados.OrderByDescending(d => d.Descripcion),
            _ => filtrados
        };

        documentosFiltrados = filtrados.ToList();
    }

    private async Task RefrescarDocumentos()
    {
        try
        {
            await CargarDocumentosAsync();
            mensajeModal = "‚úÖ Datos actualizados correctamente.";
        }
        catch (Exception ex)
        {
            mensajeModal = $"‚ùå Error al actualizar los documentos: {ex.Message}";
        }
    }

    private void OnOrdenChanged(ChangeEventArgs e)
    {
        ordenActual = e.Value?.ToString() ?? "codigoAsc";
        AplicarFiltrosYOrden();
    }

    private void OnEstadoChanged(ChangeEventArgs e)
    {
        estadoFiltro = e.Value?.ToString() ?? "todos";
        AplicarFiltrosYOrden();
    }

    private void CerrarModal()
    {
        mensajeModal = null;
    }
}
